version: '3.2'
services:
  frontendserverdev:
    env_file: .env
    build:
      context: ./     
      dockerfile: docker/frontendserverDev/Dockerfile
    volumes:
      - ./certificates:/certificates/
      - ./ReactApp/package.json:/frontendserverAppDev/package.json
      - ./ReactApp/src:/frontendserverAppDev/src
      - ./ReactApp/public:/frontendserverAppDev/public
    restart: always
    logging:
      driver: "none"
    #network_mode: host
    ports:
      - "3001:3000"
  pvserver1:
    build:
      context: ./
      dockerfile: docker/pvserver/Dockerfile
    restart: always
    network_mode: host
    tty: true
    stdin_open: true
    env_file: .env
    environment:
      - ALARM_DATABASE=localhost
      - ALARM_DATABASE_REPLICA_SET_NAME=devrs
      - LOADSAVE_DATABASE=localhost
      - LOADSAVE_DATABASE_REPLICA_SET_NAME=devrs
      - ADMIN_DATABASE=localhost
      - ADMIN_DATABASE_REPLICA_SET_NAME=devrs
      - WATCH_DEBUG_DATABASE=localhost
      - WATCH_DEBUG_DATABASE_REPLICA_SET_NAME=devrs
      - DEMO_ARCHIVER=http://localhost:17668
      - pvServerLogLevel=INFO
      - pvServerLogFile=/pvServer/log/pvServerLogFile
      - REACT_APP_PyEpicsServerPORT=9001
      - REACT_APP_PyEpicsServerBASEURL=http://127.0.0.1
    volumes:
      - ./certificates:/certificates/
      - ./users:/pvServer/userAuthentication/users
      - ./log/:/pvServer/log
      - ./build:/pvServer/build
  nginx:
    image: nginx:1.19.6
    restart: always
    network_mode: host
    depends_on:
      - pvserver1
    entrypoint:
      - /custom/setupNginx.styleguide.dev.sh
      - /docker-entrypoint.sh
    command: ["nginx", "-g", "daemon off;"] 
    volumes:
      - ./nginx/setupNginx.styleguide.dev.sh:/custom/setupNginx.styleguide.dev.sh
      - ./nginx/nginx.styleguide.dev.conf:/custom/nginx.styleguide.dev.conf
      - ./nginx/nginx.httpredirect.conf:/custom/nginx.httpredirect.conf
      - ./build/styleguide:/var/www/styleguide
      - ./certificates:/etc/nginx/certificates
    env_file: .env
  unsecurestylguidepvserver:
    build:
      context: ./
 
      dockerfile: docker/pvserver/Dockerfile
    restart: always
    network_mode: host
    env_file: .env
    environment:
          - REACT_APP_PyEpicsServerBASEURL=http://127.0.0.1
          - REACT_APP_PyEpicsServerPORT=5001
          - REACT_APP_EnableLogin=false
          - DEMO_ARCHIVER=http://localhost:17668
          
          
          - no_proxy
    volumes:
          - ./certificates:/certificates/
  demoioc:
    build:
      context: ./
      dockerfile: docker/demoioc/Dockerfile
    tty: true
    stdin_open: true
    restart: always
    network_mode: host

  signalcli:
    build:
      context: ./
      dockerfile: docker/signalcli/Dockerfile
    hostname: signalcli
    restart: always
    network_mode: "host"
    stdin_open: true
    tty: true
    env_file: .env
    volumes:
      - "./signalcli/signal-cli-config:/srv/signal/.local/share/signal-cli"
      
  initializealarmhandlerdb:
    build:
      context: ./
      dockerfile: docker/alarmHandlerDbInit/Dockerfile
    hostname: initializealarmhandlerdb
    restart: on-failure
    network_mode: "host"
    depends_on:
      - mongosetup
    stdin_open: true
    tty: true
    env_file: .env

  alarmhandlerserver:
    build:
      context: ./
      dockerfile: docker/alarmHandlerServer/Dockerfile
    hostname: alarmhandlerserver
    restart: always
    depends_on:
      - initializealarmhandlerdb
    network_mode: "host"
    stdin_open: true
    tty: true
    env_file: .env

  mongo1:
    image: mongo:4.2.3-bionic
    hostname: mongo1
    restart: always
    network_mode: "host"
    env_file: .env
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME-admin}
    #   MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD-password}
    logging:
      driver: "none"
    volumes:
      - "mongo-db-data1:/data/db"
      - "mongo-db-configdb1:/data/configdb"
    command: "--bind_ip_all --port 27017 --replSet ${REPLICA_SET_NAME-devrs}"

  mongo2:
    image: mongo:4.2.3-bionic
    hostname: mongo2
    restart: always
    network_mode: "host"
    env_file: .env
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME-admin}
    #   MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD-password}
    logging:
      driver: "none"
    volumes:
      - "mongo-db-data2:/data/db"
      - "mongo-db-configdb2:/data/configdb"
    command: "--bind_ip_all --port 27018 --replSet ${REPLICA_SET_NAME-devrs}"

  mongo3:
    image: mongo:4.2.3-bionic
    hostname: mongo3
    restart: always
    network_mode: "host"
    env_file: .env
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME-admin}
    #   MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD-password}
    logging:
      driver: "none"
    volumes:
      - "mongo-db-data3:/data/db"
      - "mongo-db-configdb3:/data/configdb"
    command: "--bind_ip_all --port 27019 --replSet ${REPLICA_SET_NAME-devrs}"

  mongosetup:
    build:
      context: ./
      dockerfile: docker/mongoSetup/Dockerfile
    hostname: mongosetup
    restart: on-failure
    network_mode: "host"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    stdin_open: true
    tty: true
    env_file: .env

  initializeloadsavedb:
    env_file: .env
    environment:
      - LOADSAVE_DATABASE=localhost
      - LOADSAVE_DATABASE_REPLICA_SET_NAME=devrs
    build:
      context: ./

     
      dockerfile: docker/loadSaveDbInit/Dockerfile
    network_mode: "host"
    tty: true
    stdin_open: true
    depends_on:
      - mongosetup
  styleguideserverdev:
    env_file: .env
    build:
      context: ./
     
      dockerfile: docker/styleguideServerDev/Dockerfile
    volumes:
      - ./certificates:/certificates/
      - ./ReactApp/package.json:/frontendserverAppDev/package.json
      - ./ReactApp/src:/frontendserverAppDev/src
      - ./ReactApp/public:/frontendserverAppDev/public
      - ./ReactApp/styleguide.config.js:/frontendserverAppDev/styleguide.config.js
    restart: always
    #network_mode: host
    ports:
      - "6061:6060"


volumes:
  mongo-db-data1:
  mongo-db-configdb1:
  mongo-db-data2:
  mongo-db-configdb2:
  mongo-db-data3:
  mongo-db-configdb3:
