services:
  epicsbase:
    image: epicsbase
    build:
      context: ./
      dockerfile: docker/epicsBase/Dockerfile
  node_cache:
    image: node_cache
    build:
      context: ./
      dockerfile: docker/node_cache/Dockerfile
  frontendserverdev:
    env_file: .env
    build:
      context: ./     
      dockerfile: docker/frontendserverDev/Dockerfile
    volumes:
      - ./ReactApp/package.json:/ReactApp/package.json
      - ./ReactApp/src:/ReactApp/src
      - ./ReactApp/index.html:/ReactApp/index.html
      - ./ReactApp/vite.config.js:/ReactApp/vite.config.js
      - ./ReactApp/public:/ReactApp/public
    restart: always
    ports:
      - "3001:3000"
    depends_on:
      - node_cache

  pvserver1:
    build:
      context: ./
      dockerfile: docker/pvserver/Dockerfile
    restart: always
    network_mode: host
    tty: true
    stdin_open: true
    env_file: .env
    environment:
      - ALARM_DATABASE=localhost
      - ALARM_DATABASE_REPLICA_SET_NAME=devrs
      - LOADSAVE_DATABASE=localhost
      - LOADSAVE_DATABASE_REPLICA_SET_NAME=devrs
      - ADMIN_DATABASE=localhost
      - ADMIN_DATABASE_REPLICA_SET_NAME=devrs
      - WATCH_DEBUG_DATABASE=localhost
      - WATCH_DEBUG_DATABASE_REPLICA_SET_NAME=devrs
      - DEMO_ARCHIVER=http://localhost:17668
      - pvServerLogLevel=INFO
      - pvServerLogFile=/pvServer/log/pvServerLogFile
      - pvServerPort=9001
      - pvServerURL=http://127.0.0.1
    volumes:
      - ./log/:/pvServer/log
      - ./build:/pvServer/build
    depends_on:
      - epicsbase
  nginx:
    image: nginx:1.25.3
    restart: always
    network_mode: host
    depends_on:
      - pvserver1
    entrypoint:
      - /custom/setupNginx.dev.sh
      - /docker-entrypoint.sh
    command: ["nginx", "-g", "daemon off;"] 
    volumes:
      - ./nginx/setupNginx.dev.sh:/custom/setupNginx.dev.sh
      - ./nginx/nginx.dev.conf:/custom/nginx.dev.conf
      - ./nginx/nginx.httpredirect.conf:/custom/nginx.httpredirect.conf
      - ./build/styleguide:/var/www/styleguide
      - ./certificates:/etc/nginx/certificates
    env_file: .env
  unsecurestylguidepvserver:
    build:
      context: ./
 
      dockerfile: docker/pvserver/Dockerfile
    restart: always
    network_mode: host
    env_file: .env
    environment:
          - ALARM_DATABASE=localhost
          - ALARM_DATABASE_REPLICA_SET_NAME=devrs
          - LOADSAVE_DATABASE=localhost
          - LOADSAVE_DATABASE_REPLICA_SET_NAME=devrs
          - ADMIN_DATABASE=localhost
          - ADMIN_DATABASE_REPLICA_SET_NAME=devrs
          - WATCH_DEBUG_DATABASE=localhost
          - WATCH_DEBUG_DATABASE_REPLICA_SET_NAME=devrs
          - DEMO_ARCHIVER=http://localhost:17668
          - pvServerURL=http://127.0.0.1
          - pvServerPort=5001
          - VITE_EnableLogin=false
    volumes:
          - ./certificates:/certificates/
    depends_on:
      - epicsbase

  demoioc:
    build:
      context: ./
     
      dockerfile: docker/demoioc/Dockerfile
    tty: true
    stdin_open: true
    restart: always
    network_mode: host
    depends_on:
      - epicsbase
  storybook:
    build:
      context: ./
      dockerfile: docker/storybook/Dockerfile    
    env_file: .env
    environment:
            - pvServerPort=5001
            - VITE_EnableLogin=false
    volumes:
      - ./build/styleguide:/build/
    depends_on:
      - node_cache
  


  signalcli:
    build:
      context: ./
      dockerfile: docker/signalcli/Dockerfile
    hostname: signalcli
    restart: always
    network_mode: "host"
    stdin_open: true
    tty: true
    env_file: .env
    volumes:
      - "./signalcli/signal-cli-config:/srv/signal/.local/share/signal-cli"

  initializealarmhandlerdb:
    build:
      context: ./
      dockerfile: docker/alarmHandlerDbInit/Dockerfile
    hostname: initializealarmhandlerdb
    restart: on-failure
    network_mode: "host"
    depends_on:
      - mongosetup
    stdin_open: true
    tty: true
    env_file: .env

  alarmhandlerserver:
    build:
      context: ./
      dockerfile: docker/alarmHandlerServer/Dockerfile
    hostname: alarmhandlerserver
    restart: always
    depends_on:
      - epicsbase
      - initializealarmhandlerdb
    network_mode: "host"
    stdin_open: true
    tty: true
    env_file: .env
    volumes:
      - ./log/:/usr/src/app/log

  # As of RAS V5.0.0 MongoDB the mongodb version is now defined by the RAS_MONGODB_VERSION variable in the .env file
  # This allows you customize the mongodb version, for example should you want to stay on an older version of mongodb

  # In the volumes section, the mogodb volumes are now defined by the compose project name and mongodb version
  # It allows for multiple RAS instances to be run on the same machine.
  # In this case, make sure to set the COMPOSE_PROJECT_NAME variable in the .env file or make sure project folder names are unique between instances

  mongo1:
    image: mongo:${RAS_MONGODB_VERSION-7.0.5}
    hostname: mongo1
    restart: always
    network_mode: "host"
    env_file: .env
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME-admin}
    #   MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD-password}
    logging:
      driver: "none"
    volumes:
      - "mongo-db-data1:/data/db"
      - "mongo-db-configdb1:/data/configdb"
    command: "--bind_ip_all --port 27017 --replSet ${REPLICA_SET_NAME-devrs}"

  mongo2:
    image: mongo:${RAS_MONGODB_VERSION-7.0.5}
    hostname: mongo2
    restart: always
    network_mode: "host"
    env_file: .env
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME-admin}
    #   MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD-password}
    logging:
      driver: "none"
    volumes:
      - "mongo-db-data2:/data/db"
      - "mongo-db-configdb2:/data/configdb"
    command: "--bind_ip_all --port 27018 --replSet ${REPLICA_SET_NAME-devrs}"

  mongo3:
    image: mongo:${RAS_MONGODB_VERSION-7.0.5}
    hostname: mongo3
    restart: always
    network_mode: "host"
    env_file: .env
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME-admin}
    #   MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD-password}
    logging:
      driver: "none"
    volumes:
      - "mongo-db-data3:/data/db"
      - "mongo-db-configdb3:/data/configdb"
    command: "--bind_ip_all --port 27019 --replSet ${REPLICA_SET_NAME-devrs}"

  mongosetup:
    build:
      context: ./
      dockerfile: docker/mongoSetup/Dockerfile
    hostname: mongosetup
    restart: on-failure
    network_mode: "host"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    stdin_open: true
    tty: true
    env_file: .env

  initializeloadsavedb:
    env_file: .env
    environment:
      - LOADSAVE_DATABASE=localhost
      - LOADSAVE_DATABASE_REPLICA_SET_NAME=devrs
    build:
      context: ./

     
      dockerfile: docker/loadSaveDbInit/Dockerfile
    network_mode: "host"
    tty: true
    stdin_open: true
    depends_on:
      - mongosetup
  initializeadmindb:
    env_file: .env
    environment:
      - ADMIN_DATABASE=localhost
      - ADMIN_DATABASE_REPLICA_SET_NAME=devrs
    build:
      context: ./

     
      dockerfile: docker/adminDbInit/Dockerfile
    network_mode: "host"
    tty: true
    stdin_open: true
    depends_on:
      - mongosetup
  areadetectorsim:
    image: prjemian/synapps
    network_mode: host
    environment:
      - PREFIX="ras:adsim:" # OPI macro: P = ras:adsim: , R = cam1:
    command: bash -c "/root/bin/adsim.sh start && tail -f /dev/null"

# As of RAS V5.0.0 MongoDB volumes are now defined by the compose project name and mongodb version
# This allows you customize the mongodb version, for example should you want to stay on an older version of mongodb
# It allows for multiple RAS instances to be run on the same machine.
# In this case, make sure to set the COMPOSE_PROJECT_NAME variable in the .env file or make sure project folder names are unique between instances

volumes:
  mongo-db-data1:
    name: ${COMPOSE_PROJECT_NAME}-mongo-db-data1-mongo-${RAS_MONGODB_VERSION-7.0.5}
  mongo-db-configdb1:
    name: ${COMPOSE_PROJECT_NAME}-mongo-db-configdb1-mongo-${RAS_MONGODB_VERSION-7.0.5}
  mongo-db-data2:
    name: ${COMPOSE_PROJECT_NAME}-mongo-db-data2-mongo-${RAS_MONGODB_VERSION-7.0.5}
  mongo-db-configdb2:
    name: ${COMPOSE_PROJECT_NAME}-mongo-db-configdb2-mongo-${RAS_MONGODB_VERSION-7.0.5}
  mongo-db-data3:
    name: ${COMPOSE_PROJECT_NAME}-mongo-db-data3-mongo-${RAS_MONGODB_VERSION-7.0.5}
  mongo-db-configdb3:
    name: ${COMPOSE_PROJECT_NAME}-mongo-db-configdb3-mongo-${RAS_MONGODB_VERSION-7.0.5}
